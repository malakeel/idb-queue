
I got the pleasure to work in a problem at my daily job. The problem I was trying to solve it to have use indexedDB for caching large size messages for later processing.
Those messages may reside on the client machine while the offline, and be sent to the server when online.

The obivious solutions is to use observables to queue the payloads, and this will decouple the UI part from server communication. On the communication side, I can create an observable to periodically iterate over existing record in the database and send them. If I do this, then messages will be emmitted as soon as they are written to the DB, and when offline, they will reside in the clients memroy, defeating the purpose of caching them in the first place.

The challenge was to have a feedback mechanism to the observable, to let it know that the subscriber is ready for more and may be I need more understanding of the observalbe push mechanism. 

The work around this, was to use higher-order observable to provide stream of inner observables. Data are loaded from the DB only when the inner observable is consumed/subscribed to. This way I can ensure there's no empty events are emmited (when no records are avaialbe), and prevent records from being pushed at once.

RxJS operators for back-pressure (buffer, bufferCount .. etc) may of may not have worked.












